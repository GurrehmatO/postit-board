{"version":3,"sources":["components/Note/Note.style.ts","colors.ts","components/Note/ColorBox.tsx","components/Note/NoteThemer.tsx","components/Note/Note.tsx","components/Column/Column.style.ts","components/Column/Column.tsx","App/AppState.ts","utils.ts","App/App.style.ts","App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["makeStyles","theme","note","border","margin","maxWidth","background","palette","primary","main","titleBar","width","display","flexDirection","justifyContent","noteMain","padding","delete","color","contrastText","height","noteHeading","noteText","dialogCurrent","alignItems","currentText","fontWeight","marginRight","picker","marginTop","dialogButton","colors","amber","blue","blueGrey","brown","cyan","deepOrange","deepPurple","green","grey","indigo","lightBlue","lightGreen","lime","orange","pink","purple","red","teal","yellow","useStyles","colorBox","check","ColorBox","onClick","size","isSelected","classes","ButtonBase","className","style","disabled","title","Check","NoteThemer","open","setOpen","colId","id","dispatch","useState","localColor","setLocalColor","splitColors","useMemo","Object","keys","reduce","acc","curr","index","map","row","rowIndex","length","useEffect","Dialog","onClose","DialogTitle","DialogContent","Typography","singleColor","colorIndex","ThemeProvider","createMuiTheme","DialogActions","Button","type","payload","col","Note","heading","content","contentRef","useRef","themerOpen","setThemerOpen","draggableId","noteProvided","noteSnapshot","Paper","elevation","ref","innerRef","draggableProps","dragHandleProps","IconButton","Delete","Brush","onSubmit","e","preventDefault","current","focus","InputBase","value","placeholder","onChange","target","autoFocus","multiline","inputRef","column","minHeight","flexGrow","colHeading","fontSize","notesContainer","Column","notes","headingRef","blur","droppableId","columnProvided","columnSnapshot","initialState","notesReducer","state","action","nextId","filter","min","max","Math","ceil","floor","random","sourceId","sourceNotes","targetId","targetNotes","app","appTitle","alignSelf","colContainer","App","useReducer","columns","onDragEnd","result","source","destination","newNotes","list","startIndex","endIndex","Array","from","splice","removed","reorder","find","droppableSource","droppableDestination","sourceClone","destClone","move","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13181676.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  note: {\r\n    border: \"2px solid black\",\r\n    margin: 10,\r\n    maxWidth: 250,\r\n    background: theme.palette.primary.main,\r\n  },\r\n  titleBar: {\r\n    width: \"calc(100% + 2px)\",\r\n    background: \"rgba(0, 0, 0, 0.1)\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  noteMain: {\r\n    padding: 10,\r\n    width: \"100%\",\r\n  },\r\n  delete: {\r\n    color: theme.palette.primary.contrastText,\r\n    width: 20,\r\n    height: 20,\r\n  },\r\n  noteHeading: {\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n  noteText: {\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n  dialogCurrent: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  currentText: {\r\n    fontWeight: \"bold\",\r\n    marginRight: 4,\r\n  },\r\n  picker: {\r\n    marginTop: 20,\r\n  },\r\n  dialogButton: {\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n","import {\r\n  amber,\r\n  blue,\r\n  blueGrey,\r\n  brown,\r\n  cyan,\r\n  deepOrange,\r\n  deepPurple,\r\n  green,\r\n  grey,\r\n  indigo,\r\n  lightBlue,\r\n  lightGreen,\r\n  lime,\r\n  orange,\r\n  pink,\r\n  purple,\r\n  red,\r\n  teal,\r\n  yellow,\r\n} from \"@material-ui/core/colors\";\r\n\r\nconst colors = {\r\n  amber,\r\n  blue,\r\n  blueGrey,\r\n  brown,\r\n  cyan,\r\n  deepOrange,\r\n  deepPurple,\r\n  green,\r\n  grey,\r\n  indigo,\r\n  lightBlue,\r\n  lightGreen,\r\n  lime,\r\n  orange,\r\n  pink,\r\n  purple,\r\n  red,\r\n  teal,\r\n  yellow,\r\n};\r\n\r\nexport default colors;\r\n","import { ButtonBase, makeStyles } from \"@material-ui/core\";\r\nimport { Check } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\n\r\ntype ColorBoxProps = {\r\n  color: string;\r\n  onClick?: () => void;\r\n  size?: number;\r\n  isSelected?: boolean;\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  colorBox: {\r\n    width: 30,\r\n    height: 30,\r\n    background: theme.palette.primary.main,\r\n  },\r\n  check: {\r\n    color: theme.palette.primary.contrastText,\r\n  },\r\n}));\r\n\r\nconst ColorBox = ({\r\n  color = \"green\",\r\n  onClick,\r\n  size,\r\n  isSelected = false,\r\n}: ColorBoxProps) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <ButtonBase\r\n      className={classes.colorBox}\r\n      style={{\r\n        ...(size && { width: size, height: size }),\r\n      }}\r\n      disabled={!onClick}\r\n      onClick={onClick}\r\n      title={color}\r\n    >\r\n      {isSelected && <Check className={classes.check} />}\r\n    </ButtonBase>\r\n  );\r\n};\r\n\r\nexport default ColorBox;\r\n","import {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Typography,\r\n  ThemeProvider,\r\n  createMuiTheme,\r\n  DialogActions,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { ClassNameMap } from \"@material-ui/styles\";\r\nimport React, { useEffect, useMemo, useState } from \"react\";\r\nimport { ActionType } from \"../../App/AppState\";\r\nimport colors from \"../../colors\";\r\nimport ColorBox from \"./ColorBox\";\r\n\r\ntype NoteThemerProps = {\r\n  color: string;\r\n  colId: string;\r\n  id: string;\r\n  open: boolean;\r\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n  dispatch: React.Dispatch<ActionType>;\r\n  classes: ClassNameMap<string>;\r\n};\r\n\r\nconst NoteThemer = ({\r\n  color,\r\n  open,\r\n  setOpen,\r\n  colId,\r\n  id,\r\n  dispatch,\r\n  classes,\r\n}: NoteThemerProps) => {\r\n  const [localColor, setLocalColor] = useState(color);\r\n  const splitColors: Array<Array<string>> = useMemo(\r\n    () =>\r\n      Object.keys(colors).reduce(\r\n        (acc: Array<Array<string>>, curr: string, index: number) =>\r\n          //@ts-ignore\r\n          index % 4 === 0\r\n            ? [...acc, [curr]]\r\n            : acc.map((row, rowIndex) =>\r\n                rowIndex === acc.length - 1 ? [...row, curr] : row\r\n              ),\r\n        []\r\n      ),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      setLocalColor(color);\r\n    }\r\n  }, [open, color]);\r\n\r\n  return (\r\n    <Dialog open={open} onClose={() => setOpen(false)}>\r\n      <DialogTitle>Customize this Note</DialogTitle>\r\n      <DialogContent>\r\n        <div className={classes.dialogCurrent}>\r\n          <Typography className={classes.currentText}>\r\n            Select a theme\r\n          </Typography>\r\n        </div>\r\n        <div className={classes.picker}>\r\n          {splitColors.map((row, index) => (\r\n            <div key={index}>\r\n              {row.map((singleColor, colorIndex) => (\r\n                <ThemeProvider\r\n                  theme={createMuiTheme({\r\n                    palette: {\r\n                      // @ts-ignore\r\n                      primary: colors[singleColor],\r\n                    },\r\n                  })}\r\n                  key={colorIndex}\r\n                >\r\n                  <ColorBox\r\n                    color={singleColor}\r\n                    size={50}\r\n                    onClick={() => setLocalColor(singleColor)}\r\n                    isSelected={localColor === singleColor}\r\n                  />\r\n                </ThemeProvider>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <ThemeProvider\r\n          theme={createMuiTheme({\r\n            palette: {\r\n              // @ts-ignore\r\n              primary: colors[color],\r\n            },\r\n          })}\r\n        >\r\n          <Button\r\n            onClick={() => {\r\n              setOpen(false);\r\n            }}\r\n            className={classes.dialogButton}\r\n            color=\"primary\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </ThemeProvider>\r\n        <ThemeProvider\r\n          theme={createMuiTheme({\r\n            palette: {\r\n              // @ts-ignore\r\n              primary: colors[localColor],\r\n            },\r\n          })}\r\n        >\r\n          <Button\r\n            onClick={() => {\r\n              dispatch({\r\n                type: \"EDIT_NOTE\",\r\n                payload: {\r\n                  col: colId,\r\n                  note: id,\r\n                  color: localColor,\r\n                },\r\n              });\r\n              setOpen(false);\r\n            }}\r\n            className={classes.dialogButton}\r\n            color=\"primary\"\r\n            disabled={color === localColor}\r\n          >\r\n            Apply\r\n          </Button>\r\n        </ThemeProvider>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default NoteThemer;\r\n","import React, { useRef, useState } from \"react\";\r\nimport { NoteType, ActionType } from \"../../App/AppState\";\r\nimport { IconButton, InputBase, Paper } from \"@material-ui/core\";\r\nimport useStyles from \"./Note.style\";\r\nimport { Delete, Brush } from \"@material-ui/icons\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport NoteThemer from \"./NoteThemer\";\r\n\r\ntype NoteProps = NoteType & {\r\n  dispatch: React.Dispatch<ActionType>;\r\n  colId: string;\r\n  index: number;\r\n};\r\n\r\nconst Note = ({\r\n  id,\r\n  heading,\r\n  content,\r\n  color,\r\n  dispatch,\r\n  colId,\r\n  index,\r\n}: NoteProps) => {\r\n  const contentRef = useRef<HTMLInputElement>(null);\r\n  const classes = useStyles();\r\n  const [themerOpen, setThemerOpen] = useState<boolean>(false);\r\n\r\n  return (\r\n    <Draggable draggableId={id} index={index}>\r\n      {(noteProvided, noteSnapshot) => (\r\n        <Paper\r\n          className={classes.note}\r\n          elevation={6}\r\n          ref={noteProvided.innerRef}\r\n          {...noteProvided.draggableProps}\r\n        >\r\n          <div className={classes.titleBar} {...noteProvided.dragHandleProps}>\r\n            <IconButton\r\n              onClick={() =>\r\n                dispatch({\r\n                  type: \"DELETE_NOTE\",\r\n                  payload: { col: colId, note: id },\r\n                })\r\n              }\r\n            >\r\n              <Delete className={classes.delete} />\r\n            </IconButton>\r\n            <IconButton onClick={() => setThemerOpen(true)}>\r\n              <Brush className={classes.delete} />\r\n            </IconButton>\r\n          </div>\r\n          <div className={classes.noteMain}>\r\n            <form\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n                contentRef && contentRef?.current?.focus();\r\n              }}\r\n            >\r\n              <InputBase\r\n                value={heading}\r\n                placeholder={\"Enter Note Heading...\"}\r\n                onChange={(e) => {\r\n                  dispatch({\r\n                    type: \"EDIT_NOTE\",\r\n                    payload: {\r\n                      col: colId,\r\n                      note: id,\r\n                      heading: e.target.value,\r\n                    },\r\n                  });\r\n                }}\r\n                autoFocus\r\n                className={classes.noteHeading}\r\n              />\r\n            </form>\r\n            <InputBase\r\n              value={content}\r\n              multiline\r\n              inputRef={contentRef}\r\n              onChange={(e) =>\r\n                dispatch({\r\n                  type: \"EDIT_NOTE\",\r\n                  payload: {\r\n                    col: colId,\r\n                    note: id,\r\n                    content: e.target.value,\r\n                  },\r\n                })\r\n              }\r\n              placeholder=\"Take a note...\"\r\n              className={classes.noteText}\r\n            />\r\n          </div>\r\n          <NoteThemer\r\n            color={color}\r\n            open={themerOpen}\r\n            setOpen={setThemerOpen}\r\n            colId={colId}\r\n            id={id}\r\n            dispatch={dispatch}\r\n            classes={classes}\r\n          />\r\n        </Paper>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport default makeStyles({\r\n  column: {\r\n    maxWidth: \"60%\",\r\n    minHeight: \"50vh\",\r\n    padding: 20,\r\n    border: \"2px solid #aaaaaa\",\r\n    // borderLeft: \"0\",\r\n\r\n    flexGrow: 1,\r\n  },\r\n  colHeading: {\r\n    fontWeight: \"bold\",\r\n    fontSize: 20,\r\n  },\r\n  notesContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    // flexWrap: \"wrap\",\r\n  },\r\n});\r\n","import {\r\n  Button,\r\n  createMuiTheme,\r\n  InputBase,\r\n  ThemeProvider,\r\n} from \"@material-ui/core\";\r\nimport React, { useRef } from \"react\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport { ColType, ActionType } from \"../../App/AppState\";\r\nimport Note from \"../Note/Note\";\r\nimport useStyles from \"./Column.style\";\r\nimport colors from \"../../colors\";\r\n\r\ntype columnProps = ColType & {\r\n  dispatch: React.Dispatch<ActionType>;\r\n};\r\nconst Column = ({ id, heading, notes, dispatch }: columnProps) => {\r\n  const headingRef = useRef<HTMLInputElement>(null);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.column}>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          headingRef && headingRef?.current?.blur();\r\n        }}\r\n      >\r\n        <InputBase\r\n          value={heading}\r\n          placeholder={\"Enter Column Heading...\"}\r\n          onChange={(e) => {\r\n            dispatch({\r\n              type: \"EDIT_COL_HEADING\",\r\n              payload: { col: id, heading: e.target.value },\r\n            });\r\n          }}\r\n          autoFocus={notes.length === 0}\r\n          className={classes.colHeading}\r\n          inputRef={headingRef}\r\n        />\r\n      </form>\r\n      <Droppable droppableId={id}>\r\n        {(columnProvided, columnSnapshot) => (\r\n          <div className={classes.notesContainer} ref={columnProvided.innerRef}>\r\n            {notes.map((note, index) => (\r\n              <ThemeProvider\r\n                theme={createMuiTheme({\r\n                  palette: {\r\n                    // @ts-ignore\r\n                    primary: colors[note.color],\r\n                  },\r\n                })}\r\n                key={note.id}\r\n              >\r\n                <Note {...note} colId={id} dispatch={dispatch} index={index} />\r\n              </ThemeProvider>\r\n            ))}\r\n            {columnProvided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n      <Button\r\n        onClick={() => dispatch({ type: \"ADD_NOTE\", payload: { col: id } })}\r\n      >\r\n        Add Note\r\n      </Button>\r\n      <Button onClick={() => dispatch({ type: \"DELETE_COL\", payload: id })}>\r\n        Delete Column\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\nexport default Column;\r\n","import nextId from \"react-id-generator\";\r\nimport colors from \"../colors\";\r\nimport { getRandomInt } from \"../utils\";\r\n\r\n// export const ADD_COL: string = \"ADD_COL\";\r\n// export const DELETE_COL: string = \"DELETE_COL\";\r\n// export const ADD_NOTE: string = \"ADD_NOTE\";\r\n// export const ARRANGE_COLS: string = \"ARRANGE_COLS\";\r\n// export const ARRANGE_NOTES: string = \"ARRANGE_NOTES\";\r\n// export const DELETE_NOTE: string = \"DELETE_NOTE\";\r\n// export const EDIT_NOTE: string = \"EDIT_NOTE\";\r\n// export const EDIT_COL_HEADING: string = \"EDIT_COL_HEADING\";\r\n\r\nexport type NoteType = {\r\n  id: string;\r\n  heading: string;\r\n  content: string;\r\n  color: string;\r\n};\r\nexport type ColType = {\r\n  id: string;\r\n  heading: string;\r\n  notes: Array<NoteType>;\r\n};\r\nexport const initialState: Array<ColType> = [];\r\n\r\nexport type ActionType =\r\n  | {\r\n      type: \"ADD_COL\";\r\n    }\r\n  | {\r\n      type: \"DELETE_COL\";\r\n      payload: string;\r\n    }\r\n  | {\r\n      type: \"ADD_NOTE\";\r\n      payload: {\r\n        col: string;\r\n      };\r\n    }\r\n  | {\r\n      type: \"ARRANGE_COLS\";\r\n      payload: Array<ColType>;\r\n    }\r\n  | {\r\n      type: \"ARRANGE_NOTES\";\r\n      payload: {\r\n        col: string;\r\n        notes: Array<NoteType>;\r\n      };\r\n    }\r\n  | {\r\n      type: \"DELETE_NOTE\";\r\n      payload: {\r\n        col: string;\r\n        note: string;\r\n      };\r\n    }\r\n  | {\r\n      type: \"EDIT_NOTE\";\r\n      payload: {\r\n        col: string;\r\n        note: string;\r\n        heading?: string;\r\n        content?: string;\r\n        color?: string;\r\n      };\r\n    }\r\n  | {\r\n      type: \"EDIT_COL_HEADING\";\r\n      payload: {\r\n        col: string;\r\n        heading: string;\r\n      };\r\n    }\r\n  | {\r\n      type: \"MOVE_NOTE\";\r\n      payload: {\r\n        sourceId: string;\r\n        sourceNotes: Array<NoteType>;\r\n        targetId: string;\r\n        targetNotes: Array<NoteType>;\r\n      };\r\n    };\r\n\r\nexport const notesReducer: (\r\n  state: typeof initialState,\r\n  action: ActionType\r\n) => Array<ColType> = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_COL\":\r\n      return [\r\n        ...state,\r\n        {\r\n          id: nextId(\"col\"),\r\n          heading: \"\",\r\n          notes: [],\r\n        },\r\n      ];\r\n    case \"DELETE_COL\":\r\n      return state.filter((column) => column.id !== action.payload);\r\n    case \"ARRANGE_COLS\":\r\n      return [...action.payload];\r\n    case \"EDIT_COL_HEADING\":\r\n      return state.map((column) =>\r\n        column.id === action.payload.col\r\n          ? {\r\n              ...column,\r\n              heading: action.payload.heading,\r\n            }\r\n          : column\r\n      );\r\n    case \"ADD_NOTE\":\r\n      return state.map((column) =>\r\n        column.id === action.payload.col\r\n          ? {\r\n              ...column,\r\n              notes: [\r\n                ...column.notes,\r\n                {\r\n                  id: nextId(\"note\"),\r\n                  heading: \"\",\r\n                  content: \"\",\r\n                  color:\r\n                    Object.keys(colors)[\r\n                      getRandomInt(0, Object.keys(colors).length)\r\n                    ],\r\n                },\r\n              ],\r\n            }\r\n          : column\r\n      );\r\n    case \"ARRANGE_NOTES\":\r\n      return state.map((column) =>\r\n        column.id === action.payload.col\r\n          ? {\r\n              ...column,\r\n              notes: [...action.payload.notes],\r\n            }\r\n          : column\r\n      );\r\n    case \"DELETE_NOTE\":\r\n      return state.map((column) =>\r\n        column.id === action.payload.col\r\n          ? {\r\n              ...column,\r\n              notes: column.notes.filter(\r\n                (note) => note.id !== action.payload.note\r\n              ),\r\n            }\r\n          : column\r\n      );\r\n    case \"EDIT_NOTE\":\r\n      return state.map((column) =>\r\n        column.id === action.payload.col\r\n          ? {\r\n              ...column,\r\n              notes: column.notes.map((note) =>\r\n                note.id === action.payload.note\r\n                  ? {\r\n                      ...note,\r\n                      ...(typeof action.payload.heading === typeof \"\" && {\r\n                        heading: action.payload.heading,\r\n                      }),\r\n                      ...(typeof action.payload.content === typeof \"\" && {\r\n                        content: action.payload.content,\r\n                      }),\r\n                      ...(action.payload.color && {\r\n                        color: action.payload.color,\r\n                      }),\r\n                    }\r\n                  : note\r\n              ),\r\n            }\r\n          : column\r\n      );\r\n    case \"MOVE_NOTE\":\r\n      return state.map((column) => {\r\n        if (column.id === action.payload.sourceId) {\r\n          return {\r\n            ...column,\r\n            notes: [...action.payload.sourceNotes],\r\n          };\r\n        }\r\n        if (column.id === action.payload.targetId) {\r\n          return {\r\n            ...column,\r\n            notes: [...action.payload.targetNotes],\r\n          };\r\n        }\r\n        return column;\r\n      });\r\n  }\r\n};\r\n","import { DraggableLocation } from \"react-beautiful-dnd\";\r\n\r\n// a little function to help us with reordering the result\r\nexport const reorder = (\r\n  list: Array<any>,\r\n  startIndex: number,\r\n  endIndex: number\r\n) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nexport const move = (\r\n  source: Array<any>,\r\n  destination: Array<any>,\r\n  droppableSource: DraggableLocation,\r\n  droppableDestination: DraggableLocation\r\n) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n  const result = {\r\n    source: sourceClone,\r\n    destination: destClone,\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\nexport const getRandomInt = (min: number, max: number) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n};\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport default makeStyles({\r\n  app: {\r\n    width: \"100vw\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"stretch\",\r\n  },\r\n  appTitle: {\r\n    fontSize: 30,\r\n    alignSelf: \"center\",\r\n  },\r\n  colContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    width: \"100%\",\r\n  },\r\n});\r\n","// import { Button } from \"@material-ui/core\";\nimport React, { useEffect, useReducer } from \"react\";\nimport Column from \"../components/Column/Column\";\nimport { initialState, notesReducer } from \"./AppState\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport useStyles from \"./App.style\";\nimport { reorder, move } from \"../utils\";\n\nconst App = () => {\n  const [columns, dispatch] = useReducer(notesReducer, initialState);\n  const classes = useStyles();\n\n  useEffect(() => {\n    if (columns.length === 0) {\n      dispatch({ type: \"ADD_COL\" });\n    }\n  }, [columns]);\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const notesCopy = Array.from(\n        columns.find((column) => column.id === source.droppableId)?.notes || []\n      );\n      const newNotes = reorder(notesCopy, source.index, destination.index);\n\n      dispatch({\n        type: \"ARRANGE_NOTES\",\n        payload: {\n          col: source.droppableId,\n          notes: newNotes,\n        },\n      });\n    } else {\n      const result = move(\n        columns.find((column) => column.id === source.droppableId)?.notes || [],\n        columns.find((column) => column.id === destination.droppableId)\n          ?.notes || [],\n        source,\n        destination\n      );\n\n      dispatch({\n        type: \"MOVE_NOTE\",\n        payload: {\n          sourceId: source.droppableId,\n          sourceNotes: result.source,\n          targetId: destination.droppableId,\n          targetNotes: result.destination,\n        },\n      });\n    }\n  };\n\n  return (\n    <div className={classes.app}>\n      <Typography className={classes.appTitle}>POSTIT BOARD</Typography>\n      <div className={classes.colContainer}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {columns.map((column) => (\n            <Column dispatch={dispatch} {...column} key={column.id} />\n          ))}\n        </DragDropContext>\n      </div>\n      <Button onClick={() => dispatch({ type: \"ADD_COL\" })}>add column</Button>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}